var searchIndex = {};
searchIndex['heliotrope'] = {"items":[[0,"","heliotrope",""],[1,"SolrField","",""],[11,"name","","",0],[11,"value","","",0],[1,"SolrDocument","",""],[11,"fields","","",1],[1,"Solr","",""],[11,"base_url","","",2],[1,"SolrError","",""],[11,"status","","",3],[11,"time","","",3],[11,"message","","",3],[1,"SolrUpdateResponse","",""],[11,"status","","",4],[11,"time","","",4],[1,"SolrQueryResponse","",""],[11,"status","","",5],[11,"time","","",5],[11,"total","","",5],[11,"start","","",5],[11,"items","","",5],[1,"SolrQuery","",""],[2,"SolrValue","",""],[12,"SolrF64","","",6],[12,"SolrI64","","",6],[12,"SolrString","","",6],[4,"SolrUpdateResult","",""],[4,"SolrQueryResult","",""],[10,"decode","","",6],[10,"fmt","","",6],[10,"encode","","",6],[10,"fmt","","",0],[10,"fmt","","",1],[10,"new","","",1],[10,"add_field","","",1],[10,"encode","","",1],[10,"decode","","",1],[10,"new","","",2],[10,"add","","",2],[10,"add_and_commit","","",2],[10,"add_many","","",2],[10,"add_many_and_commit","","",2],[10,"commit","","",2],[10,"query","","",2],[10,"decode","","",3],[10,"decode","","",4],[10,"fmt","","",5],[10,"decode","","",5],[10,"new","","",7],[10,"to_pairs","","",7]],"paths":[[1,"SolrField"],[1,"SolrDocument"],[1,"Solr"],[1,"SolrError"],[1,"SolrUpdateResponse"],[1,"SolrQueryResponse"],[2,"SolrValue"],[1,"SolrQuery"]]};
searchIndex['http'] = {"items":[[0,"","http",""],[0,"buffer","",""],[1,"BufferedStream","http::buffer",""],[11,"wrapped","","",0],[11,"read_buffer","","",0],[11,"read_pos","","",0],[11,"read_max","","",0],[11,"write_buffer","","",0],[11,"write_len","","",0],[11,"writing_chunked_body","","",0],[10,"new","","",0],[10,"poke_byte","","Poke a single byte back so it will be read next. For this to make sense, you must have just\nread that byte. If `self.pos` is 0 and `self.max` is not 0 (i.e. if the buffer is just\nfilled\nVery great caution must be used in calling this as it will fail if `self.pos` is 0.",0],[10,"read_byte","","Slightly faster implementation of read_byte than that which is provided by ReaderUtil\n(which just uses `read()`)",0],[10,"finish_response","","Finish off writing a response: this flushes the writer and in case of chunked\nTransfer-Encoding writes the ending zero-length chunk to indicate completion.",0],[10,"read","","Read at most N bytes into `buf`, where N is the minimum of `buf.len()` and the buffer size.",0],[10,"write","","",0],[10,"flush","","",0],[0,"client","http","Modules for making HTTP requests."],[2,"NetworkStream","http::client","A TCP stream, either plain text or SSL."],[12,"NormalStream","","",1],[12,"SslProtectedStream","","",1],[0,"request","","Things for the construction and sending of HTTP requests."],[1,"RequestWriter","http::client::request",""],[11,"remote_addr","","The originating IP address of the request.",2],[11,"headers","","The host name and IP address that the request was sent to; this must always be specified for\nHTTP/1.1 requests (or the request will be rejected), but for HTTP/1.0 requests the Host\nheader was not defined, and so this field will probably be None in such cases.\nThe headers sent with the request.",2],[11,"method","","The HTTP method for the request.",2],[11,"url","","The URL being requested.",2],[10,"new","","Create a `RequestWriter` writing to the specified location",2],[10,"new_request","","",2],[10,"try_connect","","Connect to the remote host if not already connected.",2],[10,"connect","","Connect to the remote host; fails if already connected.\nReturns ``true`` upon success and ``false`` upon failure (also use conditions).",2],[10,"try_write_headers","","Write the Request-Line and headers of the response, if we have not already done so.",2],[10,"write_headers","","Write the Status-Line and headers of the response, in preparation for writing the body.",2],[10,"read_response","","Send the request and construct a `ResponseReader` out of it.",2],[10,"write","","",2],[10,"flush","","",2],[0,"response","http::client",""],[1,"ResponseReader","http::client::response",""],[11,"request","","The request which this is a response to",3],[11,"version","","The HTTP version number; typically `(1, 1)` or, less commonly, `(1, 0)`.",3],[11,"status","","The HTTP status indicated in the response.",3],[11,"headers","","The headers received in the response.",3],[10,"construct","","",3],[10,"read","","",3],[0,"common","http","Poorly categorised functions for reading things used in multiple places."],[3,"read_decimal","http::common","Read a positive decimal integer from the given reader."],[3,"read_hexadecimal","","Read a positive hexadecimal integer from the given reader."],[3,"read_http_version","","Read an HTTP-Version (e.g. \"HTTP/1.1\") from a stream."],[0,"connecter","http",""],[6,"Connecter","http::connecter","A trait for the concept of opening a stream connected to a IP socket address."],[9,"connect","","",4],[0,"server","http",""],[1,"Config","http::server","The necessary configuration for an HTTP server."],[11,"bind_address","","",5],[0,"request","",""],[1,"RequestBuffer","http::server::request",""],[11,"stream","","The socket connection to read from",6],[1,"Request","","An HTTP request sent to the server."],[11,"remote_addr","","The originating IP address of the request.",7],[11,"headers","","The host name and IP address that the request was sent to; this must always be specified for\nHTTP/1.1 requests (or the request will be rejected), but for HTTP/1.0 requests the Host\nheader was not defined, and so this field will probably be None in such cases.\nThe headers sent with the request.",7],[11,"body","","The body of the request; empty for such methods as GET.",7],[11,"method","","The HTTP method for the request.",7],[11,"request_uri","","The URI that was requested, as found in the Request-URI of the Request-Line.\nYou will almost never need to use this; you should prefer the `url` field instead.",7],[11,"close_connection","","Whether to close the TCP connection when the request has been served.\nThe alternative is keeping the connection open and waiting for another request.",7],[11,"version","","The HTTP version number; typically `(1, 1)` or, less commonly, `(1, 0)`.",7],[2,"RequestUri","","The URI (Request-URI in RFC 2616) as specified in the Status-Line of an HTTP request"],[12,"Star","","'The asterisk \"*\" means that the request does not apply to a particular resource, but to the\nserver itself, and is only allowed when the method used does not necessarily apply to a\nresource. One example would be \"OPTIONS * HTTP/1.1\" '",8],[12,"AbsoluteUri","","'The absoluteURI form is REQUIRED when the request is being made to a proxy. The proxy is\nrequested to forward the request or service it from a valid cache, and return the response.\nNote that the proxy MAY forward the request on to another proxy or directly to the server\nspecified by the absoluteURI. In order to avoid request loops, a proxy MUST be able to\nrecognize all of its server names, including any aliases, local variations, and the numeric\nIP address. An example Request-Line would be:\n\"GET http://www.w3.org/pub/WWW/TheProject.html HTTP/1.1\"'",8],[12,"AbsolutePath","","'To allow for transition to absoluteURIs in all requests in future versions of HTTP, all\nHTTP/1.1 servers MUST accept the absoluteURI form in requests, even though HTTP/1.1 clients\nwill only generate them in requests to proxies.'",8],[12,"Authority","","'The authority form is only used by the CONNECT method (CONNECT).'",8],[5,"MAX_METHOD_LEN","",""],[10,"new","","",6],[10,"read_request_line","","",6],[10,"read_header","","Read a header (name, value) pair.",6],[10,"read","","",6],[10,"eq","","",8],[10,"ne","","",8],[10,"fmt","","",8],[10,"load","","Get a response from an open socket.",7],[0,"response","http::server",""],[1,"ResponseWriter","http::server::response",""],[11,"headers","","",9],[11,"status","","",9],[10,"new","","Create a `ResponseWriter` writing to the specified location",9],[10,"write_content_auto","","Write a response with the specified Content-Type and content; the Content-Length header is\nset based upon the contents",9],[10,"try_write_headers","","Write the Status-Line and headers of the response, if we have not already done so.",9],[10,"write_headers","","Write the Status-Line and headers of the response, in preparation for writing the body.",9],[10,"finish_response","","",9],[10,"write","","",9],[10,"flush","","",9],[6,"Server","http::server",""],[9,"handle_request","","",10],[9,"get_config","","",10],[10,"serve_forever","","Attempt to bind to the address and port and start serving forever.",10],[0,"method","http",""],[2,"Method","http::method","HTTP methods, as defined in RFC 2616, ยง5.1.1."],[12,"Options","","",11],[12,"Get","","",11],[12,"Head","","",11],[12,"Post","","",11],[12,"Put","","",11],[12,"Delete","","",11],[12,"Trace","","",11],[12,"Connect","","",11],[12,"Patch","","",11],[12,"ExtensionMethod","","",11],[10,"hash","","",11],[10,"clone","","",11],[10,"eq","","",11],[10,"ne","","",11],[10,"from_str","","Get a *known* `Method` from an *ASCII* string, regardless of case.",11],[10,"fmt","","",11],[10,"from_str_or_new","","Get a `Method` from an *ASCII* string.",11],[0,"headers","http","Types and utilities for working with headers in HTTP requests and responses."],[1,"HeaderValueByteIterator","http::headers","An iterator over the bytes of a header value.\nThis ensures one cannot read past the end of a header mistakenly and that linear white space is\nhandled correctly so that nothing else needs to worry about it. Any linear whitespace (multiple\nspaces outside of a quoted-string) is compacted into a single SP."],[11,"reader","","",12],[11,"next_byte","","This field serves two purposes. *During* iteration, it will typically be ``None``, but\ncertain cases will cause it to be a ``Some``, meaning that the next ``next()`` call will\nreturn that value rather than reading a new byte. At the *end* of iteration (after\n``next()`` has returned ``None``), it will be the extra byte which it has had to consume\nfrom the stream because of the possibility of linear white space of the form ``CR LF SP``.\nIt is guaranteed that if ``self.state == Finished`` this will be a ``Some``.",12],[11,"at_start","","",12],[2,"HeaderLineErr","",""],[12,"EndOfFile","","",13],[12,"EndOfHeaders","","",13],[12,"MalformedHeaderValue","","",13],[12,"MalformedHeaderSyntax","","",13],[2,"ConsumeCommaLWSResult","",""],[12,"CommaConsumed","","",14],[12,"EndOfValue","","",14],[12,"ErrCommaNotFound","","",14],[3,"header_enum_from_stream","","Shifted out of being a default method to fix an ICE (not yet reported, TODO)"],[0,"test_utils","",""],[3,"from_stream_with_str","http::headers::test_utils",""],[3,"to_stream_into_str","",""],[3,"assert_invalid","",""],[3,"assert_conversion_correct","",""],[3,"assert_interpretation_correct","",""],[0,"serialization_utils","http::headers","Utility functions for assisting with conversion of headers from and to the HTTP text form."],[3,"normalise_header_name","http::headers::serialization_utils","Normalise an HTTP header name."],[3,"comma_split","","Split a value on commas, as is common for HTTP headers."],[3,"comma_split_iter","",""],[3,"comma_join","","Join a vector of values with commas, as is common for HTTP headers."],[3,"push_maybe_quoted_string","","Push a ( token | quoted-string ) onto a string and return it again"],[3,"maybe_quoted_string","","Make a string into a ( token | quoted-string ), preferring a token"],[3,"push_quoted_string","","Quote a string, to turn it into an RFC 2616 quoted-string"],[3,"quoted_string","","Quote a string, to turn it into an RFC 2616 quoted-string"],[3,"unquote_string","","Parse a quoted-string. Returns ``None`` if the string is not a valid quoted-string."],[3,"maybe_unquote_string","","Parse a ( token | quoted-string ). Returns ``None`` if it is not valid."],[3,"push_parameter","",""],[3,"push_parameters","",""],[6,"WriterUtil","",""],[10,"write_maybe_quoted_string","","",15],[10,"write_quoted_string","","",15],[10,"write_parameter","","",15],[10,"write_parameters","","",15],[10,"write_quality","","",15],[10,"write_token","","",15],[0,"accept_ranges","http::headers","The Accept-Ranges request header, defined in RFC 2616, Section 14.5."],[2,"RangeUnit","http::headers::accept_ranges",""],[12,"Bytes","","",16],[12,"OtherRangeUnit","","",16],[2,"AcceptableRanges","",""],[12,"RangeUnits","","",17],[12,"NoAcceptableRanges","","",17],[10,"eq","","",16],[10,"ne","","",16],[10,"clone","","",16],[10,"eq","","",17],[10,"ne","","",17],[10,"clone","","",17],[10,"from_stream","","",17],[10,"to_stream","","",17],[10,"http_value","","",17],[0,"connection","http::headers","The Connection general header, defined in RFC 2616, Section 14.10."],[2,"Connection","http::headers::connection","A value for the Connection header. Note that should it be a ``Token``, the string is in\nnormalised header case (e.g. \"Keep-Alive\")."],[12,"Token","","",18],[12,"Close","","",18],[10,"eq","","",18],[10,"ne","","",18],[10,"clone","","",18],[10,"fmt","","",18],[10,"from_stream","","",18],[10,"to_stream","","",18],[10,"http_value","","",18],[0,"content_type","http::headers","The Content-Type entity header, defined in RFC 2616, Section 14.17."],[1,"MediaType","http::headers::content_type",""],[11,"type_","","",19],[11,"subtype","","",19],[11,"parameters","","",19],[10,"eq","","",19],[10,"ne","","",19],[10,"clone","","",19],[10,"new","","",19],[10,"fmt","","",19],[10,"from_stream","","",19],[10,"to_stream","","",19],[10,"http_value","","",19],[0,"etag","http::headers",""],[1,"EntityTag","http::headers::etag",""],[11,"weak","","",20],[11,"opaque_tag","","",20],[3,"weak_etag","",""],[3,"strong_etag","",""],[10,"eq","","",20],[10,"ne","","",20],[10,"clone","","",20],[10,"fmt","","",20],[10,"from_stream","","",20],[10,"to_stream","","",20],[10,"http_value","","",20],[0,"host","http::headers","The Host request header, defined in RFC 2616, Section 14.23."],[1,"Host","http::headers::host","A simple little thing for the host of a request"],[11,"name","","The name of the host that was requested",21],[11,"port","","If unspecified, assume the default port was used (80 for HTTP, 443 for HTTPS).\nIn that case, you shouldn't need to worry about it in URLs that you build, provided you\ninclude the scheme.",21],[10,"eq","","",21],[10,"ne","","",21],[10,"clone","","",21],[10,"fmt","","",21],[10,"from_stream","","",21],[10,"http_value","","",21],[0,"transfer_encoding","http::headers","The Transfer-Encoding request header, defined in RFC 2616, sections 14.41 and 3.6."],[2,"TransferCoding","http::headers::transfer_encoding","RFC 2616, section 3.6:"],[12,"Chunked","","",22],[12,"TransferExtension","","",22],[10,"eq","","",22],[10,"ne","","",22],[10,"clone","","",22],[10,"from_stream","","",22],[10,"to_stream","","",22],[10,"http_value","","",22],[0,"request","http::headers",""],[1,"HeaderCollection","http::headers::request",""],[11,"cache_control","","",23],[11,"connection","","",23],[11,"date","","",23],[11,"pragma","","",23],[11,"trailer","","",23],[11,"transfer_encoding","","",23],[11,"upgrade","","",23],[11,"via","","",23],[11,"warning","","",23],[11,"accept","","",23],[11,"accept_charset","","",23],[11,"accept_encoding","","",23],[11,"accept_language","","",23],[11,"authorization","","",23],[11,"expect","","",23],[11,"from","","",23],[11,"host","","",23],[11,"if_match","","",23],[11,"if_modified_since","","",23],[11,"if_none_match","","",23],[11,"if_range","","",23],[11,"if_unmodified_since","","",23],[11,"max_forwards","","",23],[11,"proxy_authorization","","",23],[11,"range","","",23],[11,"referer","","",23],[11,"te","","",23],[11,"user_agent","","",23],[11,"allow","","",23],[11,"content_encoding","","",23],[11,"content_language","","",23],[11,"content_length","","",23],[11,"content_location","","",23],[11,"content_md5","","",23],[11,"content_range","","",23],[11,"content_type","","",23],[11,"expires","","",23],[11,"last_modified","","",23],[11,"extensions","","",23],[1,"HeaderCollectionIterator","",""],[2,"Header","",""],[12,"CacheControl","","",24],[12,"Connection","","",24],[12,"Date","","",24],[12,"Pragma","","",24],[12,"Trailer","","",24],[12,"TransferEncoding","","",24],[12,"Upgrade","","",24],[12,"Via","","",24],[12,"Warning","","",24],[12,"Accept","","",24],[12,"AcceptCharset","","",24],[12,"AcceptEncoding","","",24],[12,"AcceptLanguage","","",24],[12,"Authorization","","",24],[12,"Expect","","",24],[12,"From","","",24],[12,"Host","","",24],[12,"IfMatch","","",24],[12,"IfModifiedSince","","",24],[12,"IfNoneMatch","","",24],[12,"IfRange","","",24],[12,"IfUnmodifiedSince","","",24],[12,"MaxForwards","","",24],[12,"ProxyAuthorization","","",24],[12,"Range","","",24],[12,"Referer","","",24],[12,"Te","","",24],[12,"UserAgent","","",24],[12,"Allow","","",24],[12,"ContentEncoding","","",24],[12,"ContentLanguage","","",24],[12,"ContentLength","","",24],[12,"ContentLocation","","",24],[12,"ContentMd5","","",24],[12,"ContentRange","","",24],[12,"ContentType","","",24],[12,"Expires","","",24],[12,"LastModified","","",24],[12,"ExtensionHeader","","",24],[10,"clone","","",23],[10,"new","","",23],[10,"insert","","Consume a header, putting it into this structure.",23],[10,"insert_raw","","Insert a raw header into the collection.\nThis will return an error if the value is not valid UTF-8 or if the name is that\nof a strongly-typed header and the value is not a valid value for that header.",23],[10,"iter","","",23],[10,"write_all","","Write all the headers to a writer. This includes an extra \\r\\n at the end to\nsignal end of headers.",23],[10,"next","","",25],[10,"header_name","","",24],[10,"header_value","","",24],[10,"write_header","","",24],[10,"value_from_stream","","",24],[0,"response","http::headers",""],[1,"HeaderCollection","http::headers::response",""],[11,"cache_control","","",26],[11,"connection","","",26],[11,"date","","",26],[11,"pragma","","",26],[11,"trailer","","",26],[11,"transfer_encoding","","",26],[11,"upgrade","","",26],[11,"via","","",26],[11,"warning","","",26],[11,"accept_patch","","",26],[11,"accept_ranges","","",26],[11,"age","","",26],[11,"etag","","",26],[11,"location","","",26],[11,"proxy_authenticate","","",26],[11,"retry_after","","",26],[11,"server","","",26],[11,"vary","","",26],[11,"www_authenticate","","",26],[11,"allow","","",26],[11,"content_encoding","","",26],[11,"content_language","","",26],[11,"content_length","","",26],[11,"content_location","","",26],[11,"content_md5","","",26],[11,"content_range","","",26],[11,"content_type","","",26],[11,"expires","","",26],[11,"last_modified","","",26],[11,"extensions","","",26],[1,"HeaderCollectionIterator","",""],[2,"Header","",""],[12,"CacheControl","","",27],[12,"Connection","","",27],[12,"Date","","",27],[12,"Pragma","","",27],[12,"Trailer","","",27],[12,"TransferEncoding","","",27],[12,"Upgrade","","",27],[12,"Via","","",27],[12,"Warning","","",27],[12,"AcceptPatch","","",27],[12,"AcceptRanges","","",27],[12,"Age","","",27],[12,"ETag","","",27],[12,"Location","","",27],[12,"ProxyAuthenticate","","",27],[12,"RetryAfter","","",27],[12,"Server","","",27],[12,"Vary","","",27],[12,"WwwAuthenticate","","",27],[12,"Allow","","",27],[12,"ContentEncoding","","",27],[12,"ContentLanguage","","",27],[12,"ContentLength","","",27],[12,"ContentLocation","","",27],[12,"ContentMd5","","",27],[12,"ContentRange","","",27],[12,"ContentType","","",27],[12,"Expires","","",27],[12,"LastModified","","",27],[12,"ExtensionHeader","","",27],[10,"clone","","",26],[10,"new","","",26],[10,"insert","","Consume a header, putting it into this structure.",26],[10,"insert_raw","","Insert a raw header into the collection.\nThis will return an error if the value is not valid UTF-8 or if the name is that\nof a strongly-typed header and the value is not a valid value for that header.",26],[10,"iter","","",26],[10,"write_all","","Write all the headers to a writer. This includes an extra \\r\\n at the end to\nsignal end of headers.",26],[10,"next","","",28],[10,"header_name","","",27],[10,"header_value","","",27],[10,"write_header","","",27],[10,"value_from_stream","","",27],[4,"DeltaSeconds","http::headers",""],[6,"HeaderEnum","",""],[9,"header_name","","",29],[9,"header_value","","",29],[9,"write_header","","",29],[9,"value_from_stream","","Return values:",29],[6,"HeaderConvertible","","A datatype for headers."],[9,"from_stream","","Read a header value from an iterator over the raw value.",30],[10,"to_stream","","Write the HTTP value of the header to the stream.",30],[9,"http_value","","The value of the header as it would be written for an HTTP header.",30],[6,"CommaListHeaderConvertible","","A header with multiple comma-separated values. Implement this and a HeaderConvertible\nimplementation for Vec<T> is yours for freeโjust make sure your reading does not consume the\ncomma."],[10,"eq","","",14],[10,"ne","","",14],[10,"clone","","",14],[10,"new","","",12],[10,"verify_consumed","","Check that the entire header value has been consumed.",12],[10,"some_if_consumed","","Turn a constructed header value into an Option: Some(value) if the header value is consumed\nor None if it is not, thus indicating: \"I'm finished and expect nothing more. Anything more\nis an error.\"",12],[10,"consume_optional_lws","","Consume optional `*LWS`. That is, zero or more of SP and HT, until it\ngets to something other than SP and HT or gets to the end of the header.",12],[10,"consume_lws","","Consume `1*LWS`. That is, one or more of SP and HT, until it gets to\nsomething other than SP and HT or gets to the end of the header.",12],[10,"consume_comma_lws","","Return values:\n- CommaConsumed if there was a comma and it was consumed;\n- EndOfValue if the header value has been completely consumed;\n- ErrCommaNotFound if the next thing wasn't a comma (this is an error state)",12],[10,"read_quoted_string","","Read a quoted-string from the current position.\nIf the quoted-string is not begun immediately or the header ends before it is completed,\nthen None is returned; TODO: decide if I can return the bytes read (at present, escapes and\ndouble quote would be lost if I did that).",12],[10,"read_token_or_quoted_string","","Read a token (RFC 2616 definition) from the header value.",12],[10,"read_token","","Read a token (RFC 2616 definition) from the header value.",12],[10,"next","","",12],[10,"from_stream","collections::vec","",31],[10,"to_stream","","",31],[10,"http_value","","",31],[10,"from_stream","collections::string","",32],[10,"to_stream","","",32],[10,"http_value","","",32],[10,"from_stream","url","",33],[10,"http_value","","",33],[10,"from_stream","http::method","",11],[10,"http_value","","",11],[10,"from_stream","time","",34],[10,"http_value","","",34],[0,"rfc2616","http","Values taken from RFC 2616"],[3,"is_octet","http::rfc2616","OCTET: any 8-bit sequence of data (typechecking ensures this to be true)"],[3,"is_char","","CHAR: any US-ASCII character (octets 0 - 127)"],[3,"is_upalpha","","UPALPHA: any US-ASCII uppercase letter \"A\"..\"Z\">"],[3,"is_loalpha","","LOALPHA: any US-ASCII lowercase letter \"a\"..\"z\">"],[3,"is_alpha","","ALPHA: UPALPHA | LOALPHA"],[3,"is_digit","","DIGIT: any US-ASCII digit \"0\"..\"9\""],[3,"is_ctl","","CTL: any US-ASCII control character (octets 0 - 31) and DEL (127)"],[3,"is_hex","","HEX: \"A\" | \"B\" | \"C\" | \"D\" | \"E\" | \"F\" | \"a\" | \"b\" | \"c\" | \"d\" | \"e\" | \"f\" | DIGIT"],[3,"is_token_item","","token          = 1*<any CHAR except CTLs or separators>"],[3,"is_token","",""],[3,"is_separator","","separators: \"(\" | \")\" | \"<\" | \">\" | \"@\" | \",\" | \";\" | \":\"\n| \"\\\" | <\"> | \"/\" | \"[\" | \"]\" | \"?\" | \"=\" | \"{\"\n| \"}\" | SP | HT"],[5,"CR","","CR: US-ASCII CR, carriage return (13)"],[5,"LF","","LF: US-ASCII LF, linefeed (10)"],[5,"SP","","SP: US-ASCII SP, space (32)"],[5,"HT","","HT: US-ASCII HT, horizontal-tab (9)"],[5,"COLON","","US-ASCII colon (58)"],[5,"DOUBLE_QUOTE","","<\">: US-ASCII double-quote mark (34)"],[5,"BACKSLASH","","\"\\\": US-ASCII backslash (92)"],[0,"status","http",""],[2,"Status","http::status","HTTP status code"],[12,"Continue","","",35],[12,"SwitchingProtocols","","",35],[12,"Processing","","",35],[12,"Ok","","",35],[12,"Created","","",35],[12,"Accepted","","",35],[12,"NonAuthoritativeInformation","","",35],[12,"NoContent","","",35],[12,"ResetContent","","",35],[12,"PartialContent","","",35],[12,"MultiStatus","","",35],[12,"AlreadyReported","","",35],[12,"ImUsed","","",35],[12,"MultipleChoices","","",35],[12,"MovedPermanently","","",35],[12,"Found","","",35],[12,"SeeOther","","",35],[12,"NotModified","","",35],[12,"UseProxy","","",35],[12,"SwitchProxy","","",35],[12,"TemporaryRedirect","","",35],[12,"PermanentRedirect","","",35],[12,"BadRequest","","",35],[12,"Unauthorized","","",35],[12,"PaymentRequired","","",35],[12,"Forbidden","","",35],[12,"NotFound","","",35],[12,"MethodNotAllowed","","",35],[12,"NotAcceptable","","",35],[12,"ProxyAuthenticationRequired","","",35],[12,"RequestTimeout","","",35],[12,"Conflict","","",35],[12,"Gone","","",35],[12,"LengthRequired","","",35],[12,"PreconditionFailed","","",35],[12,"RequestEntityTooLarge","","",35],[12,"RequestUriTooLong","","",35],[12,"UnsupportedMediaType","","",35],[12,"RequestedRangeNotSatisfiable","","",35],[12,"ExpectationFailed","","",35],[12,"ImATeapot","","",35],[12,"AuthenticationTimeout","","",35],[12,"UnprocessableEntity","","",35],[12,"Locked","","",35],[12,"FailedDependency","","",35],[12,"MethodFailure","","",35],[12,"UnorderedCollection","","",35],[12,"UpgradeRequired","","",35],[12,"PreconditionRequired","","",35],[12,"TooManyRequests","","",35],[12,"RequestHeaderFieldsTooLarge","","",35],[12,"UnavailableForLegalReasons","","",35],[12,"InternalServerError","","",35],[12,"NotImplemented","","",35],[12,"BadGateway","","",35],[12,"ServiceUnavailable","","",35],[12,"GatewayTimeout","","",35],[12,"HttpVersionNotSupported","","",35],[12,"VariantAlsoNegotiates","","",35],[12,"InsufficientStorage","","",35],[12,"LoopDetected","","",35],[12,"NotExtended","","",35],[12,"NetworkAuthenticationRequired","","",35],[12,"UnregisteredStatus","","",35],[10,"clone","","",35],[10,"eq","","",35],[10,"ne","","",35],[10,"code","","Get the status code",35],[10,"reason","","Get the reason phrase",35],[10,"from_code_and_reason","","Get a status from the code and reason",35],[10,"fmt","","",35],[10,"fmt","","",35],[10,"to_i64","","Equivalent to `Some(self.code() as i64)`",35],[10,"to_u64","","Equivalent to `Some(self.code() as u64)`",35],[10,"from_i64","","Get a *registered* status code from the number of its status code.",35],[10,"from_u64","","Get a *registered* status code from the number of its status code.",35]],"paths":[[1,"BufferedStream"],[2,"NetworkStream"],[1,"RequestWriter"],[1,"ResponseReader"],[6,"Connecter"],[1,"Config"],[1,"RequestBuffer"],[1,"Request"],[2,"RequestUri"],[1,"ResponseWriter"],[6,"Server"],[2,"Method"],[1,"HeaderValueByteIterator"],[2,"HeaderLineErr"],[2,"ConsumeCommaLWSResult"],[6,"WriterUtil"],[2,"RangeUnit"],[2,"AcceptableRanges"],[2,"Connection"],[1,"MediaType"],[1,"EntityTag"],[1,"Host"],[2,"TransferCoding"],[1,"HeaderCollection"],[2,"Header"],[1,"HeaderCollectionIterator"],[1,"HeaderCollection"],[2,"Header"],[1,"HeaderCollectionIterator"],[6,"HeaderEnum"],[6,"HeaderConvertible"],[1,"Vec"],[1,"String"],[1,"Url"],[1,"Tm"],[2,"Status"]]};

searchIndex['url'] = {"items":[[0,"","url","<a href=\"https://github.com/servo/rust-url\"><img style=\"position: absolute; top: 0; left: 0; border: 0;\" src=\"../github.png\" alt=\"Fork me on GitHub\"></a>\n<style>.sidebar { margin-top: 53px }</style>"],[1,"Ipv6Address","","A 128 bit IPv6 address"],[11,"pieces","","",0],[1,"Url","","The parsed representation of an absolute URL."],[11,"scheme","","The scheme (a.k.a. protocol) of the URL, in ASCII lower case.",1],[11,"scheme_data","","The components of the URL whose representation depends on where the scheme is *relative*.",1],[11,"query","","The query string of the URL.",1],[11,"fragment","","The fragment identifier of the URL.",1],[1,"RelativeSchemeData","","Components for URLs in a *relative* scheme such as HTTP."],[11,"username","","The username of the URL, as a possibly empty, pecent-encoded string.",2],[11,"password","","The password of the URL.",2],[11,"host","","The host of the URL, either a domain name or an IPv4 address",2],[11,"port","","The port number of the URL.\n`None` for file-like schemes, or to indicate the default port number.",2],[11,"default_port","","The default port number for the URLโs scheme.\n`None` for file-like schemes.",2],[11,"path","","The path of the URL, as vector of pecent-encoded strings.",2],[1,"UrlParser","","A set of optional parameters for URL parsing."],[2,"Host","","The host name of an URL."],[12,"Domain","","A (DNS) domain name or an IPv4 address.",3],[12,"Ipv6","","An IPv6 address, represented inside `[...]` square brackets\nso that `:` colon characters in the address are not ambiguous\nwith the port number delimiter.",3],[2,"ParseError","","Errors that can occur during parsing."],[12,"EmptyHost","","",4],[12,"InvalidScheme","","",4],[12,"InvalidPort","","",4],[12,"InvalidIpv6Address","","",4],[12,"InvalidDomainCharacter","","",4],[12,"InvalidCharacter","","",4],[12,"InvalidBackslash","","",4],[12,"InvalidPercentEncoded","","",4],[12,"InvalidAtSymbolInUser","","",4],[12,"ExpectedTwoSlashes","","",4],[12,"ExpectedInitialSlash","","",4],[12,"NonUrlCodePoint","","",4],[12,"RelativeUrlWithScheme","","",4],[12,"RelativeUrlWithoutBase","","",4],[12,"RelativeUrlWithNonRelativeBase","","",4],[12,"NonAsciiDomainsNotSupportedYet","","",4],[12,"CannotSetFileScheme","","",4],[12,"CannotSetJavascriptScheme","","",4],[12,"CannotSetNonRelativeScheme","","",4],[2,"SchemeData","","The components of the URL whose representation depends on where the scheme is *relative*."],[12,"RelativeSchemeData","","Components for URLs in a *relative* scheme such as HTTP.",5],[12,"NonRelativeSchemeData","","No further structure is assumed for *non-relative* schemes such as `data` and `mailto`.",5],[2,"SchemeType","","Determines the behavior of the URL parser for a given scheme."],[12,"NonRelativeScheme","","Indicate that the scheme is *non-relative*.",6],[12,"RelativeScheme","","Indicate that the scheme is *relative*, and what the default port number is.",6],[12,"FileLikeRelativeScheme","","Indicate a *relative* scheme similar to the *file* scheme.",6],[3,"parse_path","","Parse `input` as a โstandaloneโ URL path,\nwith an optional query string and fragment identifier."],[3,"whatwg_scheme_type_mapper","","http://url.spec.whatwg.org/#relative-scheme"],[0,"percent_encoding","",""],[1,"EncodeSet","url::percent_encoding","Represents a set of characters / bytes that should be percent-encoded."],[3,"percent_encode_to","","Percent-encode the given bytes, and push the result to `output`."],[3,"percent_encode","","Percent-encode the given bytes."],[3,"utf8_percent_encode_to","","Percent-encode the UTF-8 encoding of the given string, and push the result to `output`."],[3,"utf8_percent_encode","","Percent-encode the UTF-8 encoding of the given string."],[3,"percent_decode_to","","Percent-decode the given bytes, and push the result to `output`."],[3,"percent_decode","","Percent-decode the given bytes."],[3,"lossy_utf8_percent_decode","","Percent-decode the given bytes, and decode the result as UTF-8."],[3,"from_hex","",""],[5,"SIMPLE_ENCODE_SET","","This encode set is used for fragment identifier and non-relative scheme data."],[5,"QUERY_ENCODE_SET","","This encode set is used in the URL parser for query strings."],[5,"DEFAULT_ENCODE_SET","","This encode set is used for path components."],[5,"USERINFO_ENCODE_SET","","This encode set is used in the URL parser for usernames and passwords."],[5,"PASSWORD_ENCODE_SET","","This encode set should be used when setting the password field of a parsed URL."],[5,"USERNAME_ENCODE_SET","","This encode set should be used when setting the username field of a parsed URL."],[5,"FORM_URLENCODED_ENCODE_SET","","This encode set is used in `application/x-www-form-urlencoded` serialization."],[0,"form_urlencoded","url","Parser and serializer for the [`application/x-www-form-urlencoded` format](\nhttp://url.spec.whatwg.org/#application/x-www-form-urlencoded),\nas used by HTML forms."],[3,"parse_str","url::form_urlencoded","Convert a string in the `application/x-www-form-urlencoded` format\ninto a vector of (name, value) pairs."],[3,"parse_bytes","","Convert a byte string in the `application/x-www-form-urlencoded` format\ninto a vector of (name, value) pairs."],[3,"serialize_owned","","Convert a slice of owned (name, value) pairs\ninto a string in the `application/x-www-form-urlencoded` format."],[3,"serialize","","Convert an iterator of (name, value) pairs\ninto a string in the `application/x-www-form-urlencoded` format."],[0,"punycode","url","Punycode ([RFC 3492](http://tools.ietf.org/html/rfc3492)) implementation."],[3,"decode_to_string","url::punycode","Convert Punycode to an Unicode `String`."],[3,"decode","","Convert Punycode to Unicode."],[3,"encode_str","","Convert an Unicode `str` to Punycode."],[3,"encode","","Convert Unicode to Punycode."],[0,"format","url","Formatting utilities for URLs."],[1,"PathFormatter","url::format","Formatter and serializer for URL path data."],[11,"path","","The path as a slice of string-like objects (String or &str).",7],[1,"UserInfoFormatter","","Formatter and serializer for URL username and password data."],[11,"username","","URL username as a string slice.",8],[11,"password","","URL password as an optional string slice.",8],[1,"UrlNoFragmentFormatter","","Formatter for URLs which ignores the fragment field."],[11,"url","","",9],[10,"fmt","","",7],[10,"fmt","","",8],[10,"fmt","","",9],[4,"ErrorHandler","url","This is called on non-fatal parse errors."],[4,"ParseResult","",""],[6,"ToUrlPath","",""],[9,"to_url_path","","",10],[6,"FromUrlPath","",""],[9,"from_url_path","","",11],[10,"clone","","",1],[10,"eq","","",1],[10,"ne","","",1],[10,"clone","","",5],[10,"eq","","",5],[10,"ne","","",5],[10,"clone","","",2],[10,"eq","","",2],[10,"ne","","",2],[10,"hash","","",1],[10,"new","","Return a new UrlParser with default parameters.",12],[10,"base_url","","Set the base URL used for resolving relative URL references, and return the `UrlParser`.\nThe default is no base URL, so that relative URLs references fail to parse.",12],[10,"query_encoding_override","","Set the character encoding the query string is encoded as before percent-encoding,\nand return the `UrlParser`.",12],[10,"error_handler","","Set an error handler for non-fatal parse errors, and return the `UrlParser`.",12],[10,"scheme_type_mapper","","Set a *scheme type mapper*, and return the `UrlParser`.",12],[10,"parse","","Parse `input` as an URL, with all the parameters previously set in the `UrlParser`.",12],[10,"parse_path","","Parse `input` as a โstandaloneโ URL path,\nwith an optional query string and fragment identifier.",12],[10,"eq","","",6],[10,"ne","","",6],[10,"default_port","","",6],[10,"parse","","Parse an URL with the default `UrlParser` parameters.",1],[10,"from_file_path","","Convert a file name as `std::path::Path` into an URL in the `file` scheme.",1],[10,"from_directory_path","","Convert a directory name as `std::path::Path` into an URL in the `file` scheme.",1],[10,"to_file_path","","Assuming the URL is in the `file` scheme or similar,\nconvert its path to an absolute `std::path::Path`.",1],[10,"serialize","","Return the serialization of this URL as a string.",1],[10,"serialize_no_fragment","","Return the serialization of this URL, without the fragment identifier, as a string",1],[10,"non_relative_scheme_data","","If the URL is *non-relative*, return the string scheme data.",1],[10,"non_relative_scheme_data_mut","","If the URL is *non-relative*, return a mutable reference to the string scheme data.",1],[10,"relative_scheme_data","","If the URL is in a *relative scheme*, return the structured scheme data.",1],[10,"relative_scheme_data_mut","","If the URL is in a *relative scheme*,\nreturn a mutable reference to the structured scheme data.",1],[10,"username","","If the URL is in a *relative scheme*, return its username.",1],[10,"username_mut","","If the URL is in a *relative scheme*, return a mutable reference to its username.",1],[10,"lossy_percent_decode_username","","Percent-decode the URLโs username, if any.",1],[10,"password","","If the URL is in a *relative scheme*, return its password, if any.",1],[10,"password_mut","","If the URL is in a *relative scheme*, return a mutable reference to its password, if any.",1],[10,"lossy_percent_decode_password","","Percent-decode the URLโs password, if any.",1],[10,"serialize_userinfo","","Serialize the URL's username and password, if any.",1],[10,"host","","If the URL is in a *relative scheme*, return its structured host.",1],[10,"host_mut","","If the URL is in a *relative scheme*, return a mutable reference to its structured host.",1],[10,"domain","","If the URL is in a *relative scheme* and its host is a domain,\nreturn the domain as a string.",1],[10,"domain_mut","","If the URL is in a *relative scheme* and its host is a domain,\nreturn a mutable reference to the domain string.",1],[10,"serialize_host","","If the URL is in a *relative scheme*, serialize its host as a string.",1],[10,"port","","If the URL is in a *relative scheme* and has a port number, return it.",1],[10,"port_mut","","If the URL is in a *relative scheme*, return a mutable reference to its port.",1],[10,"port_or_default","","If the URL is in a *relative scheme* that is not a file-like,\nreturn its port number, even if it is the default.",1],[10,"path","","If the URL is in a *relative scheme*, return its path components.",1],[10,"path_mut","","If the URL is in a *relative scheme*, return a mutable reference to its path components.",1],[10,"serialize_path","","If the URL is in a *relative scheme*, serialize its path as a string.",1],[10,"query_pairs","","Parse the URLโs query string, if any, as `application/x-www-form-urlencoded`\nand return a vector of (key, value) pairs.",1],[10,"set_query_from_pairs","","Serialize an iterator of (key, value) pairs as `application/x-www-form-urlencoded`\nand set it as the URLโs query string.",1],[10,"lossy_percent_decode_query","","Percent-decode the URLโs query string, if any.",1],[10,"lossy_percent_decode_fragment","","Percent-decode the URLโs fragment identifier, if any.",1],[10,"fmt","","",1],[10,"fmt","","",5],[10,"lossy_percent_decode_username","","Percent-decode the URLโs username.",2],[10,"lossy_percent_decode_password","","Percent-decode the URLโs password, if any.",2],[10,"to_file_path","","Assuming the URL is in the `file` scheme or similar,\nconvert its path to an absolute `std::path::Path`.",2],[10,"domain","","If the host is a domain, return the domain as a string.",2],[10,"domain_mut","","If the host is a domain, return a mutable reference to the domain string.",2],[10,"port_or_default","","Return the port number of the URL, even if it is the default.\nReturn `None` for file-like URLs.",2],[10,"serialize_path","","Serialize the path as a string.",2],[10,"serialize_userinfo","","Serialize the userinfo as a string.",2],[10,"fmt","","",2],[10,"to_url_path","std::path::posix","",13],[10,"to_url_path","std::path::windows","",14],[10,"from_url_path","std::path::posix","",13],[10,"from_url_path","std::path::windows","",14]],"paths":[[1,"Ipv6Address"],[1,"Url"],[1,"RelativeSchemeData"],[2,"Host"],[2,"ParseError"],[2,"SchemeData"],[2,"SchemeType"],[1,"PathFormatter"],[1,"UserInfoFormatter"],[1,"UrlNoFragmentFormatter"],[6,"ToUrlPath"],[6,"FromUrlPath"],[1,"UrlParser"],[1,"Path"],[1,"Path"]]};

searchIndex['encoding'] = {"items":[[0,"","encoding","# Rust-encoding"],[0,"types","","Interface to the character encoding."],[1,"CodecError","encoding::types","Error information from either encoder or decoder."],[11,"upto","","The byte position of the first remaining byte, with respect to the *current* input.\nFor the `finish` call, this should be no more than zero (since there is no input).\nIt can be negative if the remaining byte is in the prior inputs,\nas long as the remaining byte is not yet processed.\nThe caller should feed the bytes starting from this point again\nin order to continue encoding or decoding after an error.",0],[11,"cause","","A human-readable cause of the error.",0],[2,"DecoderTrap","","Trap, which handles decoder errors."],[12,"DecodeStrict","","Immediately fails on errors.\nCorresponds to WHATWG \"fatal\" error algorithm.",1],[12,"DecodeReplace","","Replaces an error with a U+FFFD (decoder).\nCorresponds to WHATWG \"replacement\" error algorithm.",1],[12,"DecodeIgnore","","Silently ignores an error, effectively replacing it with an empty sequence.",1],[12,"DecoderTrap","","Calls given function to handle decoder errors.\nThe function is given the current decoder, input and output writer,\nand should return true only when it is fine to keep going.",1],[2,"EncoderTrap","",""],[12,"EncodeStrict","","Immediately fails on errors.\nCorresponds to WHATWG \"fatal\" error algorithm.",2],[12,"EncodeReplace","","Replaces an error with `?` in given encoding.\nNote that this fails when `?` cannot be represented in given encoding.\nCorresponds to WHATWG \"URL\" error algorithms.",2],[12,"EncodeIgnore","","Silently ignores an error, effectively replacing it with an empty sequence.",2],[12,"EncodeNcrEscape","","Replaces an error with XML numeric character references (e.g. `&#1234;`).\nThe encoder trap fails when NCRs cannot be represented in given encoding.\nCorresponds to WHATWG \"<form>\" error algorithms.",2],[12,"EncoderTrap","","Calls given function to handle encoder errors.\nThe function is given the current encoder, input and output writer,\nand should return true only when it is fine to keep going.",2],[3,"decode","","Determine the encoding by looking for a Byte Order Mark (BOM)\nand decoded a single string in memory.\nReturn the result and the used encoding."],[4,"EncodingRef","","A trait object using dynamic dispatch which is a sendable reference to the encoding,\nfor code where the encoding is not known at compile-time."],[4,"EncoderTrapFunc","","A type of the bare function in `EncoderTrap` values."],[4,"DecoderTrapFunc","","A type of the bare function in `DecoderTrap` values."],[6,"ByteWriter","","Byte writer used by `Encoder`s. In most cases this will be an owned vector of `u8`."],[10,"writer_hint","","Hints an expected lower bound on the length (in bytes) of the output\nuntil the next call to `writer_hint`,\nso that the writer can reserve the memory for writing.\n`Encoder`s are recommended but not required to call this method\nwith an appropriate estimate.\nBy default this method does nothing.",3],[9,"write_byte","","Writes a single byte.",3],[9,"write_bytes","","Writes a number of bytes.",3],[6,"StringWriter","","String writer used by `Decoder`s. In most cases this will be an owned string."],[10,"writer_hint","","Hints an expected lower bound on the length (in bytes) of the output\nuntil the next call to `writer_hint`,\nso that the writer can reserve the memory for writing.\n`Decoder`s are recommended but not required to call this method\nwith an appropriate estimate.\nBy default this method does nothing.",4],[9,"write_char","","Writes a single character.",4],[9,"write_str","","Writes a string.",4],[6,"Encoder","","Encoder converting a Unicode string into a byte sequence.\nThis is a lower level interface, and normally `Encoding::encode` should be used instead."],[9,"from_self","","Creates a fresh `Encoder` instance which parameters are same as `self`.",5],[10,"is_ascii_compatible","","Returns true if this encoding is compatible to ASCII,\ni.e. U+0000 through U+007F always map to bytes 00 through 7F and nothing else.",5],[9,"raw_feed","","Feeds given portion of string to the encoder,\npushes the an encoded byte sequence at the end of the given output,\nand returns a byte offset to the first unprocessed character\n(that can be zero when the first such character appeared in the prior calls to `raw_feed`)\nand optional error information (None means success).",5],[9,"raw_finish","","Finishes the encoder,\npushes the an encoded byte sequence at the end of the given output,\nand returns optional error information (None means success).\n`remaining` value of the error information, if any, is always an empty string.",5],[6,"Decoder","","Encoder converting a byte sequence into a Unicode string.\nThis is a lower level interface, and normally `Encoding::decode` should be used instead."],[9,"from_self","","Creates a fresh `Decoder` instance which parameters are same as `self`.",6],[10,"is_ascii_compatible","","Returns true if this encoding is compatible to ASCII,\ni.e. bytes 00 through 7F always map to U+0000 through U+007F and nothing else.",6],[9,"raw_feed","","Feeds given portion of byte sequence to the encoder,\npushes the a decoded string at the end of the given output,\nand returns an offset to the first unprocessed byte\n(that can be zero when the first such byte appeared in the prior calls to `raw_feed`)\nand optional error information (None means success).",6],[9,"raw_finish","","Finishes the decoder,\npushes the a decoded string at the end of the given output,\nand returns optional error information (None means success).",6],[6,"Encoding","","Character encoding."],[9,"name","","Returns the canonical name of given encoding.\nThis name is guaranteed to be unique across built-in encodings,\nbut it is not normative and would be at most arbitrary.",7],[10,"whatwg_name","","Returns a name of given encoding defined in the WHATWG Encoding standard, if any.\nThis name often differs from `name` due to the compatibility reason.",7],[9,"encoder","","Creates a new encoder.",7],[9,"decoder","","Creates a new decoder.",7],[10,"encode","","An easy-to-use interface to `Encoder`.\nOn the encoder error `trap` is called,\nwhich may return a replacement sequence to continue processing,\nor a failure to return the error.",7],[10,"decode","","An easy-to-use interface to `Decoder`.\nOn the decoder error `trap` is called,\nwhich may return a replacement string to continue processing,\nor a failure to return the error.",7],[10,"writer_hint","collections::vec","",8],[10,"write_byte","","",8],[10,"write_bytes","","",8],[10,"writer_hint","collections::string","",9],[10,"write_char","","",9],[10,"write_str","","",9],[0,"index","encoding","Indices used for character encoding implementation. Semi-internal."],[0,"ibm866","encoding::index",""],[3,"forward","encoding::index::ibm866",""],[3,"backward","",""],[0,"iso_8859_2","encoding::index",""],[3,"forward","encoding::index::iso_8859_2",""],[3,"backward","",""],[0,"iso_8859_3","encoding::index",""],[3,"forward","encoding::index::iso_8859_3",""],[3,"backward","",""],[0,"iso_8859_4","encoding::index",""],[3,"forward","encoding::index::iso_8859_4",""],[3,"backward","",""],[0,"iso_8859_5","encoding::index",""],[3,"forward","encoding::index::iso_8859_5",""],[3,"backward","",""],[0,"iso_8859_6","encoding::index",""],[3,"forward","encoding::index::iso_8859_6",""],[3,"backward","",""],[0,"iso_8859_7","encoding::index",""],[3,"forward","encoding::index::iso_8859_7",""],[3,"backward","",""],[0,"iso_8859_8","encoding::index",""],[3,"forward","encoding::index::iso_8859_8",""],[3,"backward","",""],[0,"iso_8859_10","encoding::index",""],[3,"forward","encoding::index::iso_8859_10",""],[3,"backward","",""],[0,"iso_8859_13","encoding::index",""],[3,"forward","encoding::index::iso_8859_13",""],[3,"backward","",""],[0,"iso_8859_14","encoding::index",""],[3,"forward","encoding::index::iso_8859_14",""],[3,"backward","",""],[0,"iso_8859_15","encoding::index",""],[3,"forward","encoding::index::iso_8859_15",""],[3,"backward","",""],[0,"iso_8859_16","encoding::index",""],[3,"forward","encoding::index::iso_8859_16",""],[3,"backward","",""],[0,"koi8_r","encoding::index",""],[3,"forward","encoding::index::koi8_r",""],[3,"backward","",""],[0,"koi8_u","encoding::index",""],[3,"forward","encoding::index::koi8_u",""],[3,"backward","",""],[0,"macintosh","encoding::index",""],[3,"forward","encoding::index::macintosh",""],[3,"backward","",""],[0,"windows_874","encoding::index",""],[3,"forward","encoding::index::windows_874",""],[3,"backward","",""],[0,"windows_1250","encoding::index",""],[3,"forward","encoding::index::windows_1250",""],[3,"backward","",""],[0,"windows_1251","encoding::index",""],[3,"forward","encoding::index::windows_1251",""],[3,"backward","",""],[0,"windows_1252","encoding::index",""],[3,"forward","encoding::index::windows_1252",""],[3,"backward","",""],[0,"windows_1253","encoding::index",""],[3,"forward","encoding::index::windows_1253",""],[3,"backward","",""],[0,"windows_1254","encoding::index",""],[3,"forward","encoding::index::windows_1254",""],[3,"backward","",""],[0,"windows_1255","encoding::index",""],[3,"forward","encoding::index::windows_1255",""],[3,"backward","",""],[0,"windows_1256","encoding::index",""],[3,"forward","encoding::index::windows_1256",""],[3,"backward","",""],[0,"windows_1257","encoding::index",""],[3,"forward","encoding::index::windows_1257",""],[3,"backward","",""],[0,"windows_1258","encoding::index",""],[3,"forward","encoding::index::windows_1258",""],[3,"backward","",""],[0,"x_mac_cyrillic","encoding::index",""],[3,"forward","encoding::index::x_mac_cyrillic",""],[3,"backward","",""],[0,"big5","encoding::index",""],[3,"forward","encoding::index::big5",""],[3,"backward","",""],[0,"euc_kr","encoding::index",""],[3,"forward","encoding::index::euc_kr",""],[3,"backward","",""],[0,"gb18030","encoding::index",""],[3,"forward","encoding::index::gb18030",""],[3,"backward","",""],[0,"gb18030_ranges","encoding::index",""],[3,"forward","encoding::index::gb18030_ranges",""],[3,"backward","",""],[0,"jis0208","encoding::index",""],[3,"forward","encoding::index::jis0208",""],[3,"backward","",""],[3,"backward_remapped","",""],[0,"jis0212","encoding::index",""],[3,"forward","encoding::index::jis0212",""],[3,"backward","",""],[0,"codec","encoding","Codec implementations."],[0,"error","encoding::codec","A placeholder encoding that returns encoder/decoder error for every case."],[1,"ErrorEncoding","encoding::codec::error","An encoding that returns encoder/decoder error for every case."],[1,"ErrorEncoder","","An encoder that always returns error."],[1,"ErrorDecoder","","A decoder that always returns error."],[10,"clone","","",10],[10,"name","","",10],[10,"encoder","","",10],[10,"decoder","","",10],[10,"clone","","",11],[10,"new","","",11],[10,"from_self","","",11],[10,"raw_feed","","",11],[10,"raw_finish","","",11],[10,"clone","","",12],[10,"new","","",12],[10,"from_self","","",12],[10,"raw_feed","","",12],[10,"raw_finish","","",12],[0,"ascii","encoding::codec","7-bit ASCII encoding."],[1,"ASCIIEncoding","encoding::codec::ascii","ASCII, also known as ISO/IEC 646:US."],[1,"ASCIIEncoder","","An encoder for ASCII."],[1,"ASCIIDecoder","","A decoder for ASCII."],[10,"clone","","",13],[10,"name","","",13],[10,"encoder","","",13],[10,"decoder","","",13],[10,"clone","","",14],[10,"new","","",14],[10,"from_self","","",14],[10,"is_ascii_compatible","","",14],[10,"raw_feed","","",14],[10,"raw_finish","","",14],[10,"clone","","",15],[10,"new","","",15],[10,"from_self","","",15],[10,"is_ascii_compatible","","",15],[10,"raw_feed","","",15],[10,"raw_finish","","",15],[0,"singlebyte","encoding::codec","Common codec implementation for single-byte encodings."],[1,"SingleByteEncoding","encoding::codec::singlebyte","A common framework for single-byte encodings based on ASCII."],[11,"name","","",16],[11,"whatwg_name","","",16],[11,"index_forward","","",16],[11,"index_backward","","",16],[1,"SingleByteEncoder","","An encoder for single-byte encodings based on ASCII."],[1,"SingleByteDecoder","","A decoder for single-byte encodings based on ASCII."],[0,"iso_8859_1","","Algorithmic mapping for ISO 8859-1."],[3,"forward","encoding::codec::singlebyte::iso_8859_1",""],[3,"backward","",""],[10,"name","encoding::codec::singlebyte","",16],[10,"whatwg_name","","",16],[10,"encoder","","",16],[10,"decoder","","",16],[10,"clone","","",17],[10,"new","","",17],[10,"from_self","","",17],[10,"is_ascii_compatible","","",17],[10,"raw_feed","","",17],[10,"raw_finish","","",17],[10,"clone","","",18],[10,"new","","",18],[10,"from_self","","",18],[10,"is_ascii_compatible","","",18],[10,"raw_feed","","",18],[10,"raw_finish","","",18],[0,"utf_8","encoding::codec","UTF-8, the universal encoding."],[1,"UTF8Encoding","encoding::codec::utf_8","UTF-8 (UCS Transformation Format, 8-bit)."],[1,"UTF8Encoder","","An encoder for UTF-8."],[1,"UTF8Decoder","","A decoder for UTF-8."],[3,"from_utf8","","Equivalent to `std::str::from_utf8`.\nThis function is provided for the fair benchmark against the stdlib's UTF-8 conversion\nfunctions, as rust-encoding always allocates a new string."],[10,"clone","","",19],[10,"name","","",19],[10,"whatwg_name","","",19],[10,"encoder","","",19],[10,"decoder","","",19],[10,"clone","","",20],[10,"new","","",20],[10,"from_self","","",20],[10,"is_ascii_compatible","","",20],[10,"raw_feed","","",20],[10,"raw_finish","","",20],[10,"new","","",21],[10,"clone","","",21],[10,"from_self","","",21],[10,"is_ascii_compatible","","",21],[10,"raw_feed","","",21],[10,"raw_finish","","",21],[0,"utf_16","encoding::codec","UTF-16."],[1,"Little","encoding::codec::utf_16","An implementation type for little endian."],[1,"Big","","An implementation type for big endian."],[1,"UTF16Encoding","","UTF-16 (UCS Transformation Format, 16-bit)."],[1,"UTF16Encoder","","An encoder for UTF-16."],[1,"UTF16Decoder","","A decoder for UTF-16."],[4,"UTF16LEEncoding","","UTF-16 in little endian."],[4,"UTF16BEEncoding","","UTF-16 in big endian."],[6,"Endian","","An internal trait used to customize UTF-16 implementations."],[9,"name","","",22],[9,"whatwg_name","","",22],[9,"write_two_bytes","","",22],[9,"concat_two_bytes","","",22],[10,"clone","","",23],[10,"clone","","",24],[10,"name","","",23],[10,"whatwg_name","","",23],[10,"write_two_bytes","","",23],[10,"concat_two_bytes","","",23],[10,"name","","",24],[10,"whatwg_name","","",24],[10,"write_two_bytes","","",24],[10,"concat_two_bytes","","",24],[10,"clone","","",25],[10,"name","","",25],[10,"whatwg_name","","",25],[10,"encoder","","",25],[10,"decoder","","",25],[10,"clone","","",26],[10,"from_self","","",26],[10,"raw_feed","","",26],[10,"raw_finish","","",26],[10,"new","","",27],[10,"from_self","","",27],[10,"raw_feed","","",27],[10,"raw_finish","","",27],[0,"korean","encoding::codec","Legacy Korean encodings based on KS X 1001."],[1,"Windows949Encoding","encoding::codec::korean","Windows code page 949."],[1,"Windows949Encoder","","An encoder for Windows code page 949."],[1,"Windows949Decoder","","A decoder for Windows code page 949."],[10,"clone","","",28],[10,"name","","",28],[10,"whatwg_name","","",28],[10,"encoder","","",28],[10,"decoder","","",28],[10,"clone","","",29],[10,"new","","",29],[10,"from_self","","",29],[10,"is_ascii_compatible","","",29],[10,"raw_feed","","",29],[10,"raw_finish","","",29],[10,"clone","","",30],[10,"new","","",30],[10,"from_self","","",30],[10,"is_ascii_compatible","","",30],[10,"raw_feed","","",30],[10,"raw_finish","","",30],[0,"japanese","encoding::codec","Legacy Japanese encodings based on JIS X 0208 and JIS X 0212."],[1,"EUCJPEncoding","encoding::codec::japanese","EUC-JP. (XXX with asymmetric JIS X 0212 support)"],[1,"EUCJPEncoder","","An encoder for EUC-JP with unused G3 character set."],[1,"EUCJP0212Decoder","","A decoder for EUC-JP with JIS X 0212 in G3."],[1,"Windows31JEncoding","","Windows code page 932, i.e. Shift_JIS with IBM/NEC extensions."],[1,"Windows31JEncoder","","An encoder for Shift_JIS with IBM/NEC extensions."],[1,"Windows31JDecoder","","A decoder for Shift_JIS with IBM/NEC extensions."],[1,"ISO2022JPEncoding","","ISO-2022-JP."],[1,"ISO2022JPEncoder","","An encoder for ISO-2022-JP without JIS X 0212/0213 support."],[1,"ISO2022JPDecoder","","A decoder for ISO-2022-JP with JIS X 0212 support."],[10,"clone","","",31],[10,"name","","",31],[10,"whatwg_name","","",31],[10,"encoder","","",31],[10,"decoder","","",31],[10,"clone","","",32],[10,"new","","",32],[10,"from_self","","",32],[10,"is_ascii_compatible","","",32],[10,"raw_feed","","",32],[10,"raw_finish","","",32],[10,"clone","","",33],[10,"new","","",33],[10,"from_self","","",33],[10,"is_ascii_compatible","","",33],[10,"raw_feed","","",33],[10,"raw_finish","","",33],[10,"clone","","",34],[10,"name","","",34],[10,"whatwg_name","","",34],[10,"encoder","","",34],[10,"decoder","","",34],[10,"clone","","",35],[10,"new","","",35],[10,"from_self","","",35],[10,"is_ascii_compatible","","",35],[10,"raw_feed","","",35],[10,"raw_finish","","",35],[10,"clone","","",36],[10,"new","","",36],[10,"from_self","","",36],[10,"is_ascii_compatible","","",36],[10,"raw_feed","","",36],[10,"raw_finish","","",36],[10,"clone","","",37],[10,"name","","",37],[10,"whatwg_name","","",37],[10,"encoder","","",37],[10,"decoder","","",37],[10,"clone","","",38],[10,"new","","",38],[10,"from_self","","",38],[10,"is_ascii_compatible","","",38],[10,"raw_feed","","",38],[10,"raw_finish","","",38],[10,"clone","","",39],[10,"new","","",39],[10,"from_self","","",39],[10,"is_ascii_compatible","","",39],[10,"raw_feed","","",39],[10,"raw_finish","","",39],[0,"simpchinese","encoding::codec","Legacy simplified Chinese encodings based on GB 2312 and GB 18030."],[1,"GB18030Encoding","encoding::codec::simpchinese","GB 18030-2005."],[1,"GB18030Encoder","","An encoder for GB 18030."],[1,"GB18030Decoder","","A decoder for GB 18030."],[1,"HZEncoding","","HZ. (RFC 1843)"],[1,"HZEncoder","","An encoder for HZ."],[1,"HZDecoder","","A decoder for HZ."],[10,"clone","","",40],[10,"name","","",40],[10,"whatwg_name","","",40],[10,"encoder","","",40],[10,"decoder","","",40],[10,"clone","","",41],[10,"new","","",41],[10,"from_self","","",41],[10,"is_ascii_compatible","","",41],[10,"raw_feed","","",41],[10,"raw_finish","","",41],[10,"clone","","",42],[10,"new","","",42],[10,"from_self","","",42],[10,"is_ascii_compatible","","",42],[10,"raw_feed","","",42],[10,"raw_finish","","",42],[10,"clone","","",43],[10,"name","","",43],[10,"whatwg_name","","",43],[10,"encoder","","",43],[10,"decoder","","",43],[10,"clone","","",44],[10,"new","","",44],[10,"from_self","","",44],[10,"is_ascii_compatible","","",44],[10,"raw_feed","","",44],[10,"raw_finish","","",44],[10,"clone","","",45],[10,"new","","",45],[10,"from_self","","",45],[10,"is_ascii_compatible","","",45],[10,"raw_feed","","",45],[10,"raw_finish","","",45],[0,"tradchinese","encoding::codec","Legacy traditional Chinese encodings."],[1,"BigFive2003Encoding","encoding::codec::tradchinese","Big5-2003 with common extensions. (XXX with asymmetric HKSCS-2008 support)"],[1,"BigFive2003Encoder","","An encoder for Big5-2003."],[1,"BigFive2003HKSCS2008Decoder","","A decoder for Big5-2003 with HKSCS-2008 extension."],[10,"clone","","",46],[10,"name","","",46],[10,"whatwg_name","","",46],[10,"encoder","","",46],[10,"decoder","","",46],[10,"clone","","",47],[10,"new","","",47],[10,"from_self","","",47],[10,"is_ascii_compatible","","",47],[10,"raw_feed","","",47],[10,"raw_finish","","",47],[10,"clone","","",48],[10,"new","","",48],[10,"from_self","","",48],[10,"is_ascii_compatible","","",48],[10,"raw_feed","","",48],[10,"raw_finish","","",48],[0,"whatwg","encoding::codec","Asymmetric or special encoding constructions required by the WHATWG Encoding standard."],[1,"EncoderOnlyUTF8Encoding","encoding::codec::whatwg","Replacement encoding used to solve a particular attack vector due to mismatching server and\nclient supports for encodings. It is rarely useful outside."],[0,"x_user_defined","","Algorithmic mapping for `x-user-defined` encoding."],[3,"forward","encoding::codec::whatwg::x_user_defined",""],[3,"backward","",""],[10,"clone","encoding::codec::whatwg","",49],[10,"name","","",49],[10,"whatwg_name","","",49],[10,"encoder","","",49],[10,"decoder","","",49],[0,"all","encoding","A list of all supported encodings. Useful for encodings fixed in the compile time."],[0,"whatwg","encoding::all",""],[5,"X_USER_DEFINED","encoding::all::whatwg",""],[5,"ISO_8859_8_I","",""],[5,"REPLACEMENT","",""],[5,"ERROR","encoding::all",""],[5,"ASCII","",""],[5,"IBM866","",""],[5,"ISO_8859_1","",""],[5,"ISO_8859_2","",""],[5,"ISO_8859_3","",""],[5,"ISO_8859_4","",""],[5,"ISO_8859_5","",""],[5,"ISO_8859_6","",""],[5,"ISO_8859_7","",""],[5,"ISO_8859_8","",""],[5,"ISO_8859_10","",""],[5,"ISO_8859_13","",""],[5,"ISO_8859_14","",""],[5,"ISO_8859_15","",""],[5,"ISO_8859_16","",""],[5,"KOI8_R","",""],[5,"KOI8_U","",""],[5,"MAC_ROMAN","",""],[5,"WINDOWS_874","",""],[5,"WINDOWS_1250","",""],[5,"WINDOWS_1251","",""],[5,"WINDOWS_1252","",""],[5,"WINDOWS_1253","",""],[5,"WINDOWS_1254","",""],[5,"WINDOWS_1255","",""],[5,"WINDOWS_1256","",""],[5,"WINDOWS_1257","",""],[5,"WINDOWS_1258","",""],[5,"MAC_CYRILLIC","",""],[5,"UTF_8","",""],[5,"UTF_16LE","",""],[5,"UTF_16BE","",""],[5,"WINDOWS_949","",""],[5,"EUC_JP","",""],[5,"WINDOWS_31J","",""],[5,"ISO_2022_JP","",""],[5,"GB18030","",""],[5,"HZ","",""],[5,"BIG5_2003","",""],[0,"label","encoding","An interface for retrieving an encoding (or a set of encodings) from a string/numeric label."],[3,"encoding_from_whatwg_label","encoding::label","Returns an encoding from given label, defined in the WHATWG Encoding standard, if any.\nImplements \"get an encoding\" algorithm: http://encoding.spec.whatwg.org/#decode"],[3,"encoding_from_windows_code_page","","Returns an encoding from Windows code page number.\nhttp://msdn.microsoft.com/en-us/library/windows/desktop/dd317756%28v=vs.85%29.aspx\nSometimes it can return a *superset* of the requested encoding, e.g. for several CJK encodings."]],"paths":[[1,"CodecError"],[2,"DecoderTrap"],[2,"EncoderTrap"],[6,"ByteWriter"],[6,"StringWriter"],[6,"Encoder"],[6,"Decoder"],[6,"Encoding"],[1,"Vec"],[1,"String"],[1,"ErrorEncoding"],[1,"ErrorEncoder"],[1,"ErrorDecoder"],[1,"ASCIIEncoding"],[1,"ASCIIEncoder"],[1,"ASCIIDecoder"],[1,"SingleByteEncoding"],[1,"SingleByteEncoder"],[1,"SingleByteDecoder"],[1,"UTF8Encoding"],[1,"UTF8Encoder"],[1,"UTF8Decoder"],[6,"Endian"],[1,"Little"],[1,"Big"],[1,"UTF16Encoding"],[1,"UTF16Encoder"],[1,"UTF16Decoder"],[1,"Windows949Encoding"],[1,"Windows949Encoder"],[1,"Windows949Decoder"],[1,"EUCJPEncoding"],[1,"EUCJPEncoder"],[1,"EUCJP0212Decoder"],[1,"Windows31JEncoding"],[1,"Windows31JEncoder"],[1,"Windows31JDecoder"],[1,"ISO2022JPEncoding"],[1,"ISO2022JPEncoder"],[1,"ISO2022JPDecoder"],[1,"GB18030Encoding"],[1,"GB18030Encoder"],[1,"GB18030Decoder"],[1,"HZEncoding"],[1,"HZEncoder"],[1,"HZDecoder"],[1,"BigFive2003Encoding"],[1,"BigFive2003Encoder"],[1,"BigFive2003HKSCS2008Decoder"],[1,"EncoderOnlyUTF8Encoding"]]};

searchIndex['openssl'] = {"items":[[0,"","openssl",""],[0,"ssl","",""],[1,"SslContext","openssl::ssl","An SSL context object"],[1,"X509StoreContext","",""],[1,"X509","","A public key certificate"],[1,"X509Name","",""],[1,"SslStream","","A stream wrapper which handles SSL encryption for an underlying stream."],[2,"SslMethod","","Determines the SSL method supported"],[12,"Sslv3","","Only support the SSLv3 protocol",0],[12,"Tlsv1","","Only support the TLSv1 protocol",0],[12,"Sslv23","","Support the SSLv2, SSLv3 and TLSv1 protocols",0],[2,"SslVerifyMode","","Determines the type of certificate verification used"],[12,"SslVerifyPeer","","Verify that the server's certificate is trusted",1],[12,"SslVerifyNone","","Do not verify the server's certificate",1],[2,"X509ValidationError","",""],[12,"X509UnableToGetIssuerCert","","",2],[12,"X509UnableToGetCrl","","",2],[12,"X509UnableToDecryptCertSignature","","",2],[12,"X509UnableToDecryptCrlSignature","","",2],[12,"X509UnableToDecodeIssuerPublicKey","","",2],[12,"X509CertSignatureFailure","","",2],[12,"X509CrlSignatureFailure","","",2],[12,"X509CertNotYetValid","","",2],[12,"X509CertHasExpired","","",2],[12,"X509CrlNotYetValid","","",2],[12,"X509CrlHasExpired","","",2],[12,"X509ErrorInCertNotBeforeField","","",2],[12,"X509ErrorInCertNotAfterField","","",2],[12,"X509ErrorInCrlLastUpdateField","","",2],[12,"X509ErrorInCrlNextUpdateField","","",2],[12,"X509OutOfMem","","",2],[12,"X509DepthZeroSelfSignedCert","","",2],[12,"X509SelfSignedCertInChain","","",2],[12,"X509UnableToGetIssuerCertLocally","","",2],[12,"X509UnableToVerifyLeafSignature","","",2],[12,"X509CertChainTooLong","","",2],[12,"X509CertRevoked","","",2],[12,"X509InvalidCA","","",2],[12,"X509PathLengthExceeded","","",2],[12,"X509InvalidPurpose","","",2],[12,"X509CertUntrusted","","",2],[12,"X509CertRejected","","",2],[12,"X509SubjectIssuerMismatch","","",2],[12,"X509AkidSkidMismatch","","",2],[12,"X509AkidIssuerSerialMismatch","","",2],[12,"X509KeyusageNoCertsign","","",2],[12,"X509UnableToGetCrlIssuer","","",2],[12,"X509UnhandledCriticalExtension","","",2],[12,"X509KeyusageNoCrlSign","","",2],[12,"X509UnhandledCriticalCrlExtension","","",2],[12,"X509InvalidNonCA","","",2],[12,"X509ProxyPathLengthExceeded","","",2],[12,"X509KeyusageNoDigitalSignature","","",2],[12,"X509ProxyCertificatesNotAllowed","","",2],[12,"X509InvalidExtension","","",2],[12,"X509InavlidPolicyExtension","","",2],[12,"X509NoExplicitPolicy","","",2],[12,"X509DifferentCrlScope","","",2],[12,"X509UnsupportedExtensionFeature","","",2],[12,"X509UnnestedResource","","",2],[12,"X509PermittedVolation","","",2],[12,"X509ExcludedViolation","","",2],[12,"X509SubtreeMinmax","","",2],[12,"X509UnsupportedConstraintType","","",2],[12,"X509UnsupportedConstraintSyntax","","",2],[12,"X509UnsupportedNameSyntax","","",2],[12,"X509CrlPathValidationError","","",2],[12,"X509ApplicationVerification","","",2],[12,"X509UnknownError","","",2],[0,"error","",""],[2,"SslError","openssl::ssl::error","An SSL error"],[12,"StreamError","","The underlying stream has reported an error",3],[12,"SslSessionClosed","","The SSL session has been closed by the other end",3],[12,"OpenSslErrors","","An error in the OpenSSL library",3],[2,"OpensslError","","An error from the OpenSSL library"],[12,"UnknownError","","An unknown error",4],[10,"eq","","",3],[10,"ne","","",3],[10,"clone","","",3],[10,"fmt","","",3],[10,"eq","","",4],[10,"ne","","",4],[10,"clone","","",4],[10,"fmt","","",4],[10,"get","","Creates a new `OpenSslErrors` with the current contents of the error\nstack.",3],[4,"VerifyCallback","openssl::ssl","The signature of functions that can be used to manually verify certificates"],[10,"drop","","",5],[10,"try_new","","Attempts to create a new SSL context.",5],[10,"new","","A convenience wrapper around `try_new`.",5],[10,"set_verify","","Configures the certificate verification method for new connections.",5],[10,"set_CA_file","","Specifies the file that contains trusted CA certificates.",5],[10,"get_error","","",6],[10,"get_current_cert","","",6],[10,"subject_name","","",7],[10,"try_new","","Attempts to create a new SSL stream",8],[10,"new","","A convenience wrapper around `try_new`.",8],[10,"read","","",8],[10,"write","","",8],[10,"flush","","",8],[0,"crypto","openssl",""],[0,"hash","openssl::crypto",""],[1,"EVP_MD_CTX","openssl::crypto::hash",""],[1,"EVP_MD","",""],[1,"EVP_PKEY_CTX","",""],[1,"Hasher","",""],[2,"HashType","",""],[12,"MD5","","",9],[12,"SHA1","","",9],[12,"SHA224","","",9],[12,"SHA256","","",9],[12,"SHA384","","",9],[12,"SHA512","","",9],[12,"RIPEMD160","","",9],[3,"evpmd","",""],[3,"hash","","Hashes the supplied input data using hash t, returning the resulting hash\nvalue"],[10,"new","","",10],[10,"update","","Update this hasher with more input bytes",10],[10,"final","","Return the digest of all bytes added to this hasher since its last\ninitialization",10],[10,"drop","","",10],[0,"hmac","openssl::crypto",""],[1,"HMAC_CTX","openssl::crypto::hmac",""],[1,"HMAC","",""],[3,"HMAC","",""],[10,"update","","",11],[10,"final","","",11],[0,"pkcs5","openssl::crypto",""],[3,"pbkdf2_hmac_sha1","openssl::crypto::pkcs5","Derives a key from a password and salt using the PBKDF2-HMAC-SHA1 algorithm."],[0,"pkey","openssl::crypto",""],[1,"PKey","openssl::crypto::pkey",""],[2,"Role","","Represents a role an asymmetric key might be appropriate for."],[12,"Encrypt","","",12],[12,"Decrypt","","",12],[12,"Sign","","",12],[12,"Verify","","",12],[2,"EncryptionPadding","","Type of encryption padding to use."],[12,"OAEP","","",13],[12,"PKCS1v15","","",13],[4,"EVP_PKEY","",""],[4,"RSA","",""],[10,"new","","",14],[10,"gen","","",14],[10,"save_pub","","Returns a serialized form of the public key, suitable for load_pub().",14],[10,"load_pub","","Loads a serialized form of the public key, as produced by save_pub().",14],[10,"save_priv","","Returns a serialized form of the public and private keys, suitable for\nload_priv().",14],[10,"load_priv","","Loads a serialized form of the public and private keys, as produced by\nsave_priv().",14],[10,"size","","Returns the size of the public key modulus.",14],[10,"can","","Returns whether this pkey object can perform the specified role.",14],[10,"max_data","","Returns the maximum amount of data that can be encrypted by an encrypt()\ncall.",14],[10,"encrypt_with_padding","","",14],[10,"decrypt_with_padding","","",14],[10,"encrypt","","Encrypts data using OAEP padding, returning the encrypted data. The\nsupplied data must not be larger than max_data().",14],[10,"decrypt","","Decrypts data, expecting OAEP padding, returning the decrypted data.",14],[10,"sign","","Signs data, using OpenSSL's default scheme and sha256. Unlike encrypt(),\ncan process an arbitrary amount of data; returns the signature.",14],[10,"verify","","Verifies a signature s (using OpenSSL's default scheme and sha256) on a\nmessage m. Returns true if the signature is valid, and false otherwise.",14],[10,"sign_with_hash","","",14],[10,"verify_with_hash","","",14],[10,"drop","","",14],[0,"rand","openssl::crypto",""],[3,"rand_bytes","openssl::crypto::rand",""],[0,"symm","openssl::crypto",""],[1,"Crypter","openssl::crypto::symm","Represents a symmetric cipher context."],[2,"Mode","",""],[12,"Encrypt","","",15],[12,"Decrypt","","",15],[2,"Type","",""],[12,"AES_128_ECB","","",16],[12,"AES_128_CBC","","",16],[12,"AES_256_ECB","","",16],[12,"AES_256_CBC","","",16],[12,"RC4_128","","",16],[3,"encrypt","","Encrypts data, using the specified crypter type in encrypt mode with the\nspecified key and iv; returns the resulting (encrypted) data."],[3,"decrypt","","Decrypts data, using the specified crypter type in decrypt mode with the\nspecified key and iv; returns the resulting (decrypted) data."],[4,"EVP_CIPHER_CTX","",""],[4,"EVP_CIPHER","",""],[10,"new","","",17],[10,"pad","","Enables or disables padding. If padding is disabled, total amount of\ndata encrypted must be a multiple of block size.",17],[10,"init","","Initializes this crypter.",17],[10,"update","","Update this crypter with more data to encrypt or decrypt. Returns\nencrypted or decrypted bytes.",17],[10,"final","","Finish crypting. Returns the remaining partial block of output, if any.",17],[10,"drop","","",17],[0,"bn","openssl",""],[1,"BigNum","openssl::bn",""],[2,"RNGProperty","",""],[12,"MsbMaybeZero","","",18],[12,"MsbOne","","",18],[12,"TwoMsbOne","","",18],[0,"unchecked","",""],[10,"add","","",19],[10,"sub","","",19],[10,"mul","","",19],[10,"div","","",19],[10,"rem","","",19],[10,"shl","","",19],[10,"shr","","",19],[10,"clone","","",19],[10,"neg","","",19],[10,"new","","",19],[10,"new_from","","",19],[10,"new_from_slice","","",19],[10,"checked_sqr","","",19],[10,"checked_nnmod","","",19],[10,"checked_mod_add","","",19],[10,"checked_mod_sub","","",19],[10,"checked_mod_mul","","",19],[10,"checked_mod_sqr","","",19],[10,"checked_exp","","",19],[10,"checked_mod_exp","","",19],[10,"checked_mod_inv","","",19],[10,"checked_gcd","","",19],[10,"checked_generate_prime","","",19],[10,"is_prime","","",19],[10,"is_prime_fast","","",19],[10,"checked_new_random","","",19],[10,"checked_new_pseudo_random","","",19],[10,"checked_rand_in_range","","",19],[10,"checked_pseudo_rand_in_range","","",19],[10,"set_bit","","",19],[10,"clear_bit","","",19],[10,"is_bit_set","","",19],[10,"mask_bits","","",19],[10,"checked_shl1","","",19],[10,"checked_shr1","","",19],[10,"checked_add","","",19],[10,"checked_sub","","",19],[10,"checked_mul","","",19],[10,"checked_div","","",19],[10,"checked_mod","","",19],[10,"checked_shl","","",19],[10,"checked_shr","","",19],[10,"negate","","",19],[10,"abs_cmp","","",19],[10,"is_negative","","",19],[10,"num_bits","","",19],[10,"num_bytes","","",19],[10,"to_vec","","",19],[10,"eq","","",19],[10,"cmp","","",19],[10,"partial_cmp","","",19],[10,"drop","","",19]],"paths":[[2,"SslMethod"],[2,"SslVerifyMode"],[2,"X509ValidationError"],[2,"SslError"],[2,"OpensslError"],[1,"SslContext"],[1,"X509StoreContext"],[1,"X509"],[1,"SslStream"],[2,"HashType"],[1,"Hasher"],[1,"HMAC"],[2,"Role"],[2,"EncryptionPadding"],[1,"PKey"],[2,"Mode"],[2,"Type"],[1,"Crypter"],[2,"RNGProperty"],[1,"BigNum"]]};

initSearch(searchIndex);
