var searchIndex = {};
searchIndex['heliotrope'] = {"items":[[0,"","heliotrope","Heliotrope is a Solr client for the [Rust](http://rust-lang.org/) programming language."],[1,"SolrField","","SolrDocument field"],[11,"name","","",0],[11,"value","","",0],[1,"SolrDocument","","SolrDocument to be used to either index or query."],[11,"fields","","Collection of document fields",1],[1,"SolrError","","SolrError"],[11,"status","","HTTP status.\nWhen failed to connect, it will be 0 (zero).",2],[11,"time","","Time it took to execute the request in milliseconds",2],[11,"message","","Detailed error message",2],[1,"SolrUpdateResponse","","Solr response used for update/indexing/commit operations"],[11,"status","","HTTP status.\nWhen failed to connect, it will be 0 (zero).",3],[11,"time","","Time it took to execute the request in milliseconds",3],[1,"SolrQueryResponse","","Solr query response"],[11,"status","","HTTP status.\nWhen failed to connect, it will be 0 (zero).",4],[11,"time","","Time it took to execute the request in milliseconds",4],[11,"total","","Total number of rows found.\nNote that this will probably be different from returned subset of rows,\nbecause Solr will always use pagination",4],[11,"start","","Rows offset (zero based)",4],[11,"items","","Current page of found Solr documents",4],[1,"SolrQuery","","Represents Solr query.\nYou'll need to build the query and pass it to Solr to execute.\nThis struct is immutable, ie returns modified clone of itself when building.\nThis is done to enable chaining."],[1,"SortClause","","A utility struct to hold sorting for a field"],[11,"field","","",5],[11,"order","","",5],[1,"Solr","","Represents your API connection to Solr.\nYou will use this struct to perform operations on Solr."],[11,"base_url","","Base URL to connect to Solr. Should include the core.\nFor example http://localhost:8983/solr/production/",6],[2,"SortOrder","","Represents sort ordering for a field"],[12,"Ascending","","",7],[12,"Descending","","",7],[10,"fmt","","",0],[10,"fmt","","",1],[10,"new","","Creates new empty SolrDocument",1],[10,"add_field","","Adds a field to the document",1],[10,"encode","","",1],[10,"clone","","",8],[10,"new","","Creates a new SolrQuery with only query term inside it",8],[10,"add_field","","Adds field (l) to the list of returned fields",8],[10,"set_fields","","Sets fields (fl) as the list of returned fields.\nThe already set fields are overwritten.",8],[10,"add_filter","","Adds query filter (fq)",8],[10,"set_filters","","Sets query filters (fq)\nAlready existing filters are overwritten.",8],[10,"add_sort","","Adds sort to query.",8],[10,"set_sorts","","Sets sorts for fields.\nAlready existing sorts will be overwritten",8],[10,"start","","Sets initial offset (zero based).\nThis method is only required when you want to get non-zero offset,\nbecause by default it's 0 (zero)",8],[10,"rows","","Sets number of rows to be returned.\nThis method is only required when you want to get non-default page size,\nwhich is 10.",8],[10,"to_pairs","","Converts this query to a vector of pairs, suitable for URL percent encoding",8],[10,"clone","","",7],[10,"to_url_param","","",7],[10,"clone","","",5],[10,"to_url_param","","",5],[10,"decode","","",2],[10,"decode","","",3],[10,"fmt","","",4],[10,"from_json_str","","Deserializes SolrQueryResponse from JSON string",4],[4,"SolrUpdateResult","",""],[4,"SolrQueryResult","",""],[10,"new","","Creates a new instance of Solr.",6],[10,"add","","Adds new document to Solr, without committing",6],[10,"add_and_commit","","Adds new document to Solr and commits it",6],[10,"add_many","","Adds multiple documents to Solr, without committing it",6],[10,"add_many_and_commit","","Ads multiple documents to Solr and commits them",6],[10,"commit","","Performs Solr commit",6],[10,"query","","Performs Solr query",6]],"paths":[[1,"SolrField"],[1,"SolrDocument"],[1,"SolrError"],[1,"SolrUpdateResponse"],[1,"SolrQueryResponse"],[1,"SortClause"],[1,"Solr"],[2,"SortOrder"],[1,"SolrQuery"]]};
initSearch(searchIndex);
